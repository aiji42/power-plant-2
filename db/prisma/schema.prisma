// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String         @id @default(uuid())
  code          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  title         String
  maker         String
  series        String
  label         String
  genres        String[]
  url           String
  releasedAt    DateTime?
  imageUrls     String[]
  casts         Cast[]
  downloadTasks DownloadTask[]
  medias        Media[]

  @@index([createdAt(sort: Desc)])
  @@index([title])
  @@index([maker])
  @@index([series])
}

model Media {
  id            String         @id @default(uuid())
  productId     String
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  url           String
  bucket        String
  key           String
  size          Int
  meta          Json
  compressTasks CompressTask[]

  @@index([size])
}

model Cast {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  name      String    @unique
  products  Product[]

  @@index([name])
}

model DownloadTask {
  id        String     @id @default(uuid())
  productId String
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  startedAt DateTime?
  stoppedAt DateTime?
  status    TaskStatus @default(Waiting)
  message   String?
  targetUrl String
}

model CompressTask {
  id        String     @id @default(uuid())
  mediaId   String
  media     Media      @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  startedAt DateTime?
  stoppedAt DateTime?
  status    TaskStatus @default(Waiting)
  message   String?
}

enum TaskStatus {
  Waiting
  Running
  Completed
  Failed
}
